// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.revrobotics.spark.SparkBase.PersistMode;
import com.revrobotics.spark.SparkBase.ResetMode;
import com.revrobotics.spark.SparkLowLevel.MotorType;
import com.revrobotics.spark.SparkMax;
import com.revrobotics.spark.config.SparkBaseConfig.IdleMode;
import com.revrobotics.spark.config.SparkMaxConfig;

// _BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // _BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // _BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private SparkMax leftFront;
private SparkMax rightFront;
private DifferentialDrive differentialDrive1;
private SparkMax leftRear;
private SparkMax rightRear;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // _BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        SparkMaxConfig l_config = new SparkMaxConfig();
        SparkMaxConfig r_config = new SparkMaxConfig();
        
        l_config
            .inverted(false)
            .idleMode(IdleMode.kCoast);
        r_config
            .inverted(true)
            .idleMode(IdleMode.kCoast);
            
        leftFront = new SparkMax(20, MotorType.kBrushless);        
        leftFront.configure(l_config, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);
            
        rightFront = new SparkMax(14, MotorType.kBrushless);  
        rightFront.configure(r_config, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);

        differentialDrive1 = new DifferentialDrive(leftFront, rightFront);
        differentialDrive1.setSafetyEnabled(true);
        differentialDrive1.setExpiration(0.1);
        differentialDrive1.setMaxOutput(1.0);


        leftRear = new SparkMax(1, MotorType.kBrushless);
        SparkMaxConfig lf_config = new SparkMaxConfig();

        lf_config
            .inverted(false)
            .idleMode(IdleMode.kCoast)
            .follow(leftFront.getDeviceId());

        leftRear.configure(lf_config, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);
        

        rightRear = new SparkMax(15, MotorType.kBrushless);
        SparkMaxConfig rf_config = new SparkMaxConfig();

        rf_config
            .inverted(true)
            .idleMode(IdleMode.kCoast)
            .follow(rightFront.getDeviceId());

        rightRear.configure(rf_config, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);


//rightRear.follow(rightFront);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void my_drive(double speed, double turn){
        SmartDashboard.putNumber("Speed", speed);
        SmartDashboard.putNumber("Turn", turn);
                differentialDrive1.arcadeDrive(speed, turn, true);
    }
}

