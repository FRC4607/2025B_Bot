// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.XboxController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final Coral_Canon m_coral_Canon = new Coral_Canon();
    public final Arm m_arm = new Arm();
    public final DriveTrain m_driveTrain = new DriveTrain();

// Joysticks
private final XboxController driveControler1 = new XboxController(0);
private final XboxController coControler1 = new XboxController(1);
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


// A chooser for autonomous commands
SendableChooser<Command> m_chooser = new SendableChooser<>();

/**
 * The container for the robot.  Contains subsystems, OI devices, and commands.
 */
private RobotContainer() {
    SmartDashboard.putData(m_driveTrain);
    SmartDashboard.putNumber("Coral Power",0.1);
    SmartDashboard.putData("Reset Encoder", new Arm_Reset_Encoder(m_arm));
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // _BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_driveTrain.setDefaultCommand(new DriveWithJoy(() -> -driveControler1.getLeftY(), () -> -driveControler1.getRightX(), m_driveTrain));
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        JoystickButton lBumper = new JoystickButton(driveControler1, 5);
        JoystickButton rBumper = new JoystickButton(driveControler1,6);
        
        
        //Joystick rTrigger = new Joystick(3);
        //Joystick lTrigger = new Joystick(2);

        //intake in
        (rBumper).whileTrue(new CoralCanon_SetVelocity(()-> 500, m_coral_Canon));

        //intake out
        (lBumper).whileTrue(new CoralCanon_SetVelocity(()-> -500, m_coral_Canon));

        //Arm Control
        //Stow
        JoystickButton menueButton = new JoystickButton(driveControler1, XboxController.Button.kStart.value);
        JoystickButton menueButtonCo = new JoystickButton(coControler1, XboxController.Button.kStart.value);
        menueButton.or(menueButtonCo).whileTrue(new Arm_ToSetPoint_Deg(0, m_arm));
      
        
        //Pickup
        JoystickButton xButton = new JoystickButton(driveControler1, XboxController.Button.kX.value);
        JoystickButton xButtonCo = new JoystickButton(coControler1, XboxController.Button.kX.value);
        xButton.or(xButtonCo).whileTrue(new Arm_ToSetPoint_Deg(90.5, m_arm));
        lBumper.and(xButtonCo).whileTrue(new CoralCanon_SetVelocity(()->-500, m_coral_Canon));
        
        //Lvl1
        JoystickButton aButton = new JoystickButton(driveControler1, XboxController.Button.kA.value);
        JoystickButton aButtonCo = new JoystickButton(coControler1, XboxController.Button.kA.value);
        aButton.or(aButtonCo).whileTrue(new Arm_ToSetPoint_Deg(45, m_arm));
        lBumper.and(aButton.or(aButtonCo)).whileTrue(new CoralCanon_SetVelocity(() -> 1000, m_coral_Canon));
        
        //LvL2
        JoystickButton bButton = new JoystickButton(driveControler1, XboxController.Button.kB.value);
        JoystickButton bButtonCo = new JoystickButton(coControler1, XboxController.Button.kB.value);
        bButton.or(bButtonCo).whileTrue(new Arm_ToSetPoint_Deg(-101, m_arm));
        lBumper.and(bButton.or(bButtonCo)).whileTrue(new CoralCanon_SetVelocity(() -> 1000, m_coral_Canon));
        
        //LvL3
        JoystickButton yButton = new JoystickButton(driveControler1, XboxController.Button.kY.value);
        JoystickButton yButtonCo = new JoystickButton(coControler1, XboxController.Button.kY.value);
        yButton.or(yButtonCo).whileTrue(new Arm_ToSetPoint_Deg(-137, m_arm));
        lBumper.and(yButton.or(yButtonCo)).whileTrue(new CoralCanon_SetVelocity(() -> 1000, m_coral_Canon));
    
       
         }
                
          @SuppressWarnings("unused")
          private void rTrigger(Arm_ToSetPoint_Deg arm_ToSetPoint_Deg) {
        
          throw new UnsupportedOperationException("Unimplemented method 'rTrigger'");
          }
        
         @SuppressWarnings("unused")
        private void lTrigger(Arm_ToSetPoint_Deg arm_ToSetPoint_Deg) {
           throw new UnsupportedOperationException("Unimplemented method 'lTrigger'");
          }
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public XboxController getDriveControler1() {
      return driveControler1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand()  {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

